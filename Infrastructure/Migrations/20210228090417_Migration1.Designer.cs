// <auto-generated />
using System;
using InterviewService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace InterviewService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210228090417_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("InterviewService.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("OptionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("InterviewService.Domain.Entities.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AllOptionRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("InterviewEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("InterviewStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxSelectedOptionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("ResponsesCountForPublish")
                        .HasColumnType("integer");

                    b.Property<bool>("ResponsesIsPublic")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("InterviewService.Domain.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnswerCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("InterviewService.Domain.Entities.Answer", b =>
                {
                    b.HasOne("InterviewService.Domain.Entities.Interview", "Interview")
                        .WithMany("Answers")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewService.Domain.Entities.Option", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("InterviewService.Domain.Entities.Option", b =>
                {
                    b.HasOne("InterviewService.Domain.Entities.Interview", "Interview")
                        .WithMany("Options")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("InterviewService.Domain.Entities.Interview", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("InterviewService.Domain.Entities.Option", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
